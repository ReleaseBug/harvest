
GDB

gdb [options] --args executable-file [inferior-arguments ...]

options:
     --
     --symbols=SYMFILE  从指定文件中读取符号表。
     --directory=DIR    加入一个源文件的搜索路径。默认搜索路径是环境变量中PATH所定义的路径。
     --nx               忽略.gdbinit 文件

初始化:
     gdb初始化时候会主动读取 ~/.gdbinit 文件，并把它作为初始化文件

编译要求:
     使用编译器(cc/gcc/g++)编译的时候加上 -g 选项，它可以把调试信息加入到可执行文件中去。如：> cc -g hello.c -o hello

调试命令:
     一般:
          l  [list] 列出当前程序执行点前后的程序源码
          bt [backtrace] 查看调用堆栈
          q  [quit]: 退出
          set args (eg: set args 10 20 30 40 50) 指定运行时main()的参数

     运行与调试:
          r  [run]      (重新)运行程序
          c  [continue] 继续
          s  [step]     单步，进入函数
          si [stepi]    单步跟踪一条机器指令
          n  [next]     单步，不进入函数
          ni [nexti]    单步跟踪一条机器指令
          finish        跳出当前函数
          u  [until]    跳出当前循环

     断点(breakPoint):
     b [break]:
          b <function>     (eg: b main)     断点设置到main
          b <linenum>      (eg: b 15)       断点设置到当前文件的第15行
          b <+/-offset>    (eg: b +10)      断点设置到当前行+10的位置
          b if <condition> (eg: b if i=10)  当i=100的时候停住
     info break：查看已经存在的断点     
     clear 清除所有断点
     clear <function>      (eg: clear main) 清除函数上的断点
     delete <breakpoints>  (eg: delete 2)   清除断点号为2的断点

     观察点(WatchPoint)
     watch <expr>     (eg: watch var)  为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。
     rwatch <expr>    (eg: rwatch var) 当表达式（变量）expr被读时，停住程序。
     awatch <expr>    (eg: awatch var) 当表达式（变量）的值被读或被写时，停住程序。
     info watchpoints 列出当前所设置了的所有观察点。

     查看运行时数据
     p [print]: 查看变量 (优先查看局部变量)
          p <expr>             (eg: p var)        十进制查看变量var的值
          p /<fmt> <expr>      (eg: p /x var)     带格式化的查看变量var的值(十六进制)
          p <$reg>             (eg: p $pc)        查看寄存器PC的值
          p file::variable     (eg: p 'a.c::var') 查看a.c中变量var的值，优先查看全局变量
          p function::variable (eg: p main::var)  查看mian()中变量var的值
          p pdata@len          (eg: p pdata@10)   查看数组且长度为10的内容
          p array              (eg: p array)      查看固定数组所有内容
     x [examine]: 查看内存数据
          x/<n/f/u> <addr> (eg: x /10xh 0x40001000) 从内存地址为0x40001000处读取10个双字的数据 
               <n> 读取字符个数
               <f> 格式化
               <u> 字符大小 b单字节 h双字节 w四字节 g八字节
     display: 自动显示内存变量数据, 单步或者断点后自动显示
          display <expr>       (eg: display var)
          display/<fmt> <expr> (eg: display /x var)
          display/<fmt> <addr> (eg: display /x 0x40001000)
          undisplay <dnums...>
          info display

     关于格式化字符 <fmt>:
          x  按十六进制格式显示变量。
          d  按十进制格式显示变量。
          u  按十进制格式显示无符号整型。
          o  按八进制格式显示变量。
          t  按二进制格式显示变量。 
          a  按十六进制格式显示变量。
          c  按字符格式显示变量。
          f  按浮点数格式显示变量。

     改变程序的执行:
          set var <var>=<value> (eg: set var width=100) 设置变量width为100
          jump <linespec>       (eg: jump 12)           强制跳转到指定行
          jump <address>        (eg: jump 0x10000004)   强制跳转到指定地址
          call <expr>           (eg: call main)         强制调用一个函数
          return 强制跳出当前函数

     查看寄存器
          info registers 查看寄存器的情况。（除了浮点寄存器）
          info all-registers 查看所有寄存器的情况。（包括浮点寄存器）
          info registers <regname ...> 查看所指定的寄存器的情况。

     定义环境变量
          set $<var> = <value> (eg: set $i=0) 设置变量
          p $<var>             (eg: p $i)     查看变量值
          show convenience 查看所有变量



