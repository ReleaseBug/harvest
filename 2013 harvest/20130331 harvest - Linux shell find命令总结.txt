
===Linux find 命令总结=====================================================================

一、find 命令格式  ~

    1、*find* 命令的一般形式；
       find path -options [-print] [-exec -ok {} \;] ~

    2、*find* 命令的参数； 
       |path| find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。
       |-print| find命令将匹配的文件输出到标准输出。
       |-exec| |COMMAND| |{}| |\;| find命令对匹配的文件执行该参数所给出的shell命令。
                                    |COMMAND| 命令, 如cp mv... 
                                    |{}|      find结果,且经过xargs处理之后的
                                    |\;|      exec结束
       |-ok| 和-exec的作用相同，但是在执行每一个命令之前，都会给出提示，让用户来确定是否执行。

    3、*find* 命令选项  
       |-name| 'name' 按照文件名查找文件。
       |-size| |(+-)n[cwbkMG]| 查找文件长度为n(单位kB MB GB)的文件。|+n|:大于 |-n|:小于 |n|:精确
       |-type| [bdcplf]查找某一类型的文件，如：
             |b| - 块设备文件。
             |d| - 目录。
             |c| - 字符设备文件。
             |p| - 管道文件。
             |l| - 符号链接文件。
             |f| - 普通文件。
       |-[acm]time| |(+-)n| 按照文件的时间(天)属性查找文件，|-n|:大于 |+n|:小于 |n|:精确。
             |-atime|: access
             |-ctime|: change
             |-mtime|: modify
       |-[i]regex| 'xxx' 实用正则表达式匹配find的结果 
             |-regex|:  不忽略大小写
             |-iregex|: 忽略大小写

二、find 命令的例子； ~

    1. 列出目录和子目录下的所有普通文件
        $ find -type f ~

    2、让当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件；
        $ find . -type f -perm 644 -exec ls -l {} \; ~

    3、为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径；
        $ find / -type f -size 0 -exec ls -l {} \;~

    4、查找/var/logs目录中更改时间在7日以前的普通文件，并在删除之前询问它们；
        $ find /var/logs -type f -mtime +7 -ok rm {} \; ~

    5、为了查找系统中所有属于root组的文件；
        $find . -group root -exec ls -l {} \; ~

    6、find命令将删除当目录中访问时间在7日以来、含有数字后缀的admin.log文件。
       该命令只检查三位数字，所以相应文件的后缀不要超过999。先建几个admin.log*的文件 ，才能使用下面这个命令
        $ find . -name "admin.log[0-9][0-9][0-9]" -atime -7  -ok rm {} \;  ~


===============================================================================================================

三、find 命令的参数
下面是find一些常用参数的例子，有用到的时候查查就行了，像上面前几个贴子，都用到了其中的的一些参数，也可以用man或查看论坛里其它贴子有 find的命令手册

1、使用name选项
文件名选项是find命令最常用的选项，要么单独使用该选项，要么和其他选项一起使用。
可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来。
不管当前路径是什么，如果想要在自己的根目录$HOME中查找文件名符合*.txt的文件，使用~作为 'pathname'参数，波浪号~代表了你的$HOME目录。
$ find ~ -name "*.txt" -print
想要在当前目录及子目录中查找所有的‘ *.txt’文件，可以用：
$ find . -name "*.txt" -print
想要的当前目录及子目录中查找文件名以一个大写字母开头的文件，可以用：
$ find . -name "[A-Z]*" -print
想要在/etc目录中查找文件名以host开头的文件，可以用：
$ find /etc -name "host*" -print
想要查找$HOME目录中的文件，可以用：
$ find ~ -name "*" -print 或find . -print
要想让系统高负荷运行，就从根目录开始查找所有的文件。
$ find / -name "*" -print
如果想在当前目录查找文件名以两个小写字母开头，跟着是两个数字，最后是.txt的文件，下面的命令就能够返回名为ax37.txt的文件：
$find . -name "[a-z][a-z][0--9][0--9].txt" -print

2、用perm选项
按照文件权限模式用-perm选项,按文件权限模式来查找文件的话。最好使用八进制的权限表示法。
如在当前目录下查找文件权限位为755的文件，即文件属主可以读、写、执行，其他用户可以读、执行的文件，可以用：
$ find . -perm 755 -print
还有一种表达方法：在八进制数字前面要加一个横杠-，表示都匹配，如-007就相当于777，-006相当于666
# ls -l
-rwxrwxr-x   
2 sam     
adm            
0 10月 31 01:01 http3.conf
-rw-rw-rw-    1
sam     
adm         34890 10月 31 00:57
httpd1.conf
-rwxrwxr-x    2
sam     
adm            
0 10月 31 01:01 httpd.conf
drw-rw-rw-    2
gem     
group        4096 10月 26 19:48 sam
-rw-rw-rw-   
1 root    
root         2792 10月 31 20:19
temp
# find . -perm 006
# find . -perm -006
./sam
./httpd1.conf
./temp
-perm mode:文件许可正好符合mode
-perm +mode:文件许可部分符合mode
-perm -mode: 文件许可完全符合mode

3、忽略某个目录
如果在查找文件时希望忽略某个目录，因为你知道那个目录中没有你所要查找的文件，那么可以使用-prune选项来指出需要忽略的目录。在使用 -prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略。
如果希望在/apps目录下查找文件，但不希望在/apps/bin目录下查找，可以用：
$ find /apps -path "/apps/bin" -prune -o -print

4、使用find查找文件的时候怎么避开某个文件目录
比如要在/usr/sam目录下查找不在dir1子目录之内的所有文件
find /usr/sam -path "/usr/sam/dir1" -prune -o -print
find [-path ..] [expression] 在路径列表的后面的是表达式
-path "/usr/sam" -prune -o -print 是 -path "/usr/sam" -a -prune -o
-print 的简写表达式按顺序求值, -a 和 -o 都是短路求值，与 shell 的 && 和 || 类似如果 -path
"/usr/sam" 为真，则求值 -prune , -prune 返回真，与逻辑表达式为真；否则不求值 -prune，与逻辑表达式为假。如果
-path "/usr/sam" -a -prune 为假，则求值 -print ，-print返回真，或逻辑表达式为真；否则不求值
-print，或逻辑表达式为真。
这个表达式组合特例可以用伪码写为
if -path "/usr/sam"  then
          -prune
else
          -print
避开多个文件夹
find /usr/sam \( -path /usr/sam/dir1 -o -path /usr/sam/file1 \) -prune -o -print
圆括号表示表达式的结合。
\ 表示引用，即指示 shell 不对后面的字符作特殊解释，而留给 find 命令去解释其意义。
查找某一确定文件，-name等选项加在-o 之后
#find /usr/sam  \(-path /usr/sam/dir1 -o -path /usr/sam/file1 \) -prune -o -name "temp" -print

5、使用user和nouser选项
按文件属主查找文件，如在$HOME目录中查找文件属主为sam的文件，可以用：
$ find ~ -user sam -print
在/etc目录下查找文件属主为uucp的文件：
$ find /etc -user uucp -print
为了查找属主帐户已经被删除的文件，可以使用-nouser选项。这样就能够找到那些属主在/etc/passwd文件中没有有效帐户的文件。在使用-nouser选项时，不必给出用户名； find命令能够为你完成相应的工作。
例如，希望在/home目录下查找所有的这类文件，可以用：
$ find /home -nouser -print

6、使用group和nogroup选项
就像user和nouser选项一样，针对文件所属于的用户组， find命令也具有同样的选项，为了在/apps目录下查找属于gem用户组的文件，可以用：
$ find /apps -group gem -print
要查找没有有效所属用户组的所有文件，可以使用nogroup选项。下面的find命令从文件系统的根目录处查找这样的文件
$ find / -nogroup-print

7、按照更改时间或访问时间等查找文件
如果希望按照更改时间来查找文件，可以使用mtime,atime或ctime选项。如果系统突然没有可用空间了，很有可能某一个文件的长度在此期间增长迅速，这时就可以用mtime选项来查找这样的文件。
用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。
希望在系统根目录下查找更改时间在5日以内的文件，可以用：
$ find / -mtime -5 -print
为了在/var/adm目录下查找更改时间在3日以前的文件，可以用：
$ find /var/adm -mtime +3 -print

8、查找比某个文件新或旧的文件
如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项。它的一般形式为：
newest_file_name ! oldest_file_name
其中，！是逻辑非符号。
查找更改时间比文件sam新但比文件temp旧的文件：
例：有两个文件
-rw-r--r--    1
sam     
adm            
0 10月 31 01:07 fiel
-rw-rw-rw-    1
sam     
adm         34890 10月 31 00:57
httpd1.conf
-rwxrwxr-x    2
sam     
adm            
0 10月 31 01:01 httpd.conf
drw-rw-rw-    2
gem     
group        4096 10月 26 19:48 sam
-rw-rw-rw-   
1 root    
root         2792 10月 31 20:19
temp
# find -newer httpd1.conf  ! -newer temp -ls
1077669   
0 -rwxrwxr-x   2 sam     
adm            
0 10月 31 01:01 ./httpd.conf
1077671    4
-rw-rw-rw-   1 root    
root         2792 10月 31 20:19
./temp
1077673    0 -rw-r--r--   1
sam     
adm            
0 10月 31 01:07 ./fiel
查找更改时间在比temp文件新的文件：
$ find . -newer temp -print

9、使用type选项
在/etc目录下查找所有的目录，可以用：
$ find /etc -type d -print
在当前目录下查找除目录以外的所有类型的文件，可以用：
$ find . ! -type d -print
在/etc目录下查找所有的符号链接文件，可以用
$ find /etc -type l -print

10、使用size选项
可以按照文件长度来查找文件，这里所指的文件长度既可以用块（block）来计量，也可以用字节来计量。以字节计量文件长度的表达形式为N c；以块计量文件长度只用数字表示即可。
在按照文件长度查找文件时，一般使用这种以字节表示的文件长度，在查看文件系统的大小，因为这时使用块来计量更容易转换。
在当前目录下查找文件长度大于1 M字节的文件：
$ find . -size +1000000c -print
在/home/apache目录下查找文件长度恰好为100字节的文件：
$ find /home/apache -size 100c -print
在当前目录下查找长度超过10块的文件（一块等于512字节）：
$ find . -size +10 -print

11、使用depth选项
在使用find命令时，可能希望先匹配所有的文件，再在子目录中查找。使用depth选项就可以使find命令这样做。这样做的一个原因就是，当在使用find命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。
在下面的例子中， find命令从文件系统的根目录开始，查找一个名为CON.FILE的文件。
它将首先匹配所有的文件然后再进入子目录中查找。
$ find / -name "CON.FILE" -depth -print

12、使用mount选项
在当前的文件系统中查找文件（不进入其他文件系统），可以使用find命令的mount选项。
从当前目录开始查找位于本文件系统中文件名以XC结尾的文件：
$ find . -name "*.XC" -mount -print



vim:tw=78:ts=8:ft=help:norl:
