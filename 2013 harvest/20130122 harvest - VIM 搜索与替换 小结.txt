VIM搜索替换总结：

搜索：
    /iSub   : 默认时候大小写敏感iSub
    /\cisub : 搜索时候大小写不敏感
    /\CiSub : 大小写敏感的收缩iSub
    /\<the  : 搜索以the为开始的单词
    /the\>  : 搜索以the为结尾的单词
    /^name  : 搜索行首位name的行
    /name$  : 搜索行尾为name的行
    /\n\t   : 搜索连续的回车和tab符号
    /a..b   : .为任意字符，占一个字符的位置

替换：
    [%]s/from/to/[g][c]
        %: 有: 当前文件
           无: 当前行
        g: 不要确认
        c: 要确认

1.	行内搜索。
    1.	f命令可以进行行内搜索。输入fx可以找到下一个x字符。
    2.	F命令可以在反方向进行行内搜索，输入Fx可以找到上一个x字符。
    3.	t命令同样是进行行内搜索，但是光标停留在符合条件的字符的前面。输入tx使光标停留在下一个x字符的前面。
    4.	T命令可以在反方向进行行内搜索，但是光标停留在符合条件的字符的下一个字符上。输入tx使光标停留在上一个x的后面的字符上。
    5.	%可以搜索与之匹配的对应的()[]{}。这个功能对于书写程序特别有用。

2.	全文的搜索。
    键入/后，光标进入VIM底部的命令行，这时就可以输入以/为开始的/搜索命令了。
    1.	最简单的查找。
        输入/string就可以查找string字符串。
    2.	继续查找。
        在第一次搜索后输入n将会继续进行上一次搜索，如果输入3n那么会找到后面第三个符合的字符串。
        大写的N会在反方向，也就是向上进行搜索。
    3.	向上搜索。
        输入?可以向上搜索。随后的n命令将会继续向上搜索，N向下搜索，其他和/一样。
    4.	对大小写的匹配。
        1.	在命令行输入:set ignorecase可以设置搜索以忽略大小写的方式进行。
            输入:set noignorecase可以设置搜索以匹配大小写的方式进行。
            默认的，将匹配大小写。这个默认设置可以在.vimrc中修改。
        2.	大小写智能匹配模式。输入命令:set ignorecase smartcase可以设置为智能大小写匹配模式。
            在这种模式下，如果你输入的字符串中至少包含一个大写字母，那么就会以大小写敏感模式进行搜索，
            否则以忽略大小写模式进行搜索。
        3.	在搜索命令中指定大小写。在几种大小写搜索模式中进行转换总要输入长长的一串指令，
            如果需要不断地转换模式，确实有些麻烦。所以你可以直接在搜索命令中指定大小写匹配模式。
            \c表示忽略大小写，而\C表示对大小写敏感。
    5.	查找当前词。
        一个简单的方法可以让你查找下一个和当前词一样的词，你不比输入/currentword，
        你可以直接按下*就可以查找下一个currentword。#可以让你向上查找同一个单词。
    6.	调整查找后的光标位置。
        1.	使用/string/3会使在光标转到找到string字符串的行下面的第3行。
            第1行从包含string的行算起。同样可以使用/string/-2来使光标停留在包含string的行的前面2行。
        2.	使用/string/e可以使光标停留在string字符串的末尾而不是默认的第一个字符位置。
            /string/b则表示停留在string第一个字符的位置，不过默认就是如此，我们不比多此一举。
            但是/string/b+2却可以使光标停留在string字符串的第二个字符的位置，这里是r。
            在e或者b的后面+或者-数字，可以进一步调整光标的位置。
    7.	特殊字符。
        在搜索命令中，  .*[]^%/?~$这10个字符有着特殊意义，所以在使用这些字符的时候要在前面加上一个反斜杠/。
        \e表示<esc>；
        \t表示<tab>；
        \r表示<cr>；
        \b表示<bs>。
    8.	匹配换行或空格。
        \n可以表示一个换行；
        \s表示匹配空白，注意是空白不是空格。
        \_s表示匹配换行或者空格；
        \_a表示匹配换行或者一个字母。
        比如：
        /the\nword查找以the结束并且下一行以word开始的行的位置。
        /the\_sword查找the和word之间以空白或者换行分割的位置。
        /the\_s\+word表示the和word之间可以有多个空白。\+的含义可以在后面找到。
    9.	限定词首或者词尾。
        \<可以限定找到是以指定字符串开始的单词。
        比如/\<the可以找到以the开始在字符串，但是会忽略在单词中间包含the的字符串。
        而\>则是限定必须是以指定字符串结尾的单词。
    10.	行首和行尾。
        输入/^string查找以string开始的行，并且光标停留在这个string的第一个字符。
        输入/string$则查找以string结束的行，并将光标停留在这个string的第一个字符。
        这个模式不会忽略前导或者后置的空格。
    11.	匹配任何一个字符。
        句号.可以匹配任何一个字符。
        例如/t.e可以找到the或者tae或者tue。

3.	更加复杂的匹配模式。
    实际上，/搜索可以使用非常复杂的匹配模式。下面列出了其中一些复杂的匹配模式。
    1.	可重复的字符。
        1.	使用*表示它前面的字符可以重复多次或者0次。
            比如/be*可以匹配b,be,bee,beee等等。但是这也会包含b，因为e重复0后是空。
            如果要匹配诸如be,bebe,bebebe的字符串可以使用\(和\)把他们包括起来，形如：/\(be\)*。
        2.	使用\+来限定为重复至少一次到无数次。
            如：/be\+可以匹配be,bee,bee等等。
        3.	重复0次或者一次。
            \=可以指定重复0次或者一次。
            /strings\=表示匹配string或者strings。这在查找单词的复数形式特别有用.
        4.	指定重复的次数。
            \{n,m}可以指定重复n到m次。
            比如：/be\{2,4}将会匹配bee,beee,beeee。
            同样可以使用\{,4}表示匹配0到4次；
            \{4,}表示4次到无数次；
            \{4}表示重复4次。
    2.	匹配列表中的一个。
        使用一个以\|分割的列表，可以表示匹配列表中任何一项。
        比如/one\|two表示查找one或者two；
        /one\|two\|three表示查找one或者two或者three。
        1.	一个复杂的实例：
            /end\(if\|while\|for\)将会查找endif，endwhile以及endfor。
        2.	字符列表。
            使用[0-9]可以表示一个0到9范围的字符。
            比如/string[1-5]表示查找string1,string2,string3,string4,string5。
            当然也可以使用[a-z]表示字符a到z中间的一个。
        3.	特殊的字符集合。
            使用\d也可以表示0到9的数字，这个选项可以代替[0-9]。
            \D表示非数字代替[^0-9]；
            \x表示十六进制数代替[0-9a-fA-F]；
            \X表示非十六进制数代替[^0-9a-fA-F]；
            \s表示空白字符代替[ ] (<Tab> 和<Space>)；
            \S表示非空白字符代替[^ ] (除<Tab> 和<Space>之外)；
            \l表示小写字母代替[a-z]；
            \L表示非小写字母代替[^a-z]；
            \u表示大写字母代替[A-Z]；
            \U表示非大写字母代替[^A-Z]

4.	搜索并替换。
    输入:[range]s/from/to/[flags]命令可以搜索匹配的字符串并且替换为指定的字符串。
    [range]是一个可选项，用来指定搜索替换的范围。
    [flags]也是一个可选项，用来指定搜索替换的处理方式。
    所以这个命令的简单形式是:s/from/to/。
    1.	搜索替换的范围。
        如果没有指定范围，则只在当前行进行搜索替换。
        1.	在所有行进行搜索替换。
            范围符号%表示在所有行进行搜索替换。
            :%s/from/to/就是在全文查找from并替换为to。
        2.	在指定的行上进行搜索替换。
            :1,50s/from/to/表示在第1行和第50行之间（包括1和50行）进行搜索和替换。
            :45s/from/to/表示仅仅在第45行进行搜索和替换。
            而"1,$"行号范围和“%“是等价的。
    2.	处理方式。
        我现在使用的VIM默认的方式是无须确认。不过好像不同版本的默认的处理方式是不同的。
        1.	无须确认。
            方式符号g表示直接替换无须进行确认。
            :%s/from/to/g表示在全文中查找from并且直接全部替换为to。
        2.	列印。
            处理方式符号p表示在替换时列出每个被改变的行。手册中这么说，但是实际效果却让我很迷惑。
        3.	确认后处理。
            处理方式符号c表示在进行替换前需要用户进行确认。
            :%s/from/to/c表示替换需要进行确认。
            这时你可以选择(y/n/a/q/1/^E/^Y）:
            y表示同意当前替换；
            n表示不同意当前替换；
            a表示替换当前和后面的并且不再确认；
            q表示立即结束替换操作；
            1表示把当前的替换后结束替换操作；
            ^E向上滚屏^Y向下滚屏，用来帮助查看前后内容以决定进行操作。


