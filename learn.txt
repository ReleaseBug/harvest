|include| *note.md*
|include| *misc.md*

|include| *BLE.txt*
|include| *GCC.txt*
|include| *Makefile.txt*
|include| *Linux.txt*
|include| *Shell.txt*
|include| *Batch.txt*
|include| *Python.txt*
|include| *Hardware.txt*
|include| *Perl.txt*
|include| *Keil.txt*

1. ppm
    石英晶振频率后面带的PPM是什么单位
    PPM是石英晶振的基本单位之一，表示晶振的精度和相对偏差，
    PPM代表着百万分之一，它表明晶体的频率可能会偏离标称值多少。
    晶振频率是以MHZ（10的6次方）和KHZ（10的3次方）为基本单位的，
    标称频率10MHZ晶振的频率偏差10HZ就刚好是1PPM.
    厂家会把每款晶振按照精度的不同分品质等级，一般分10PPM 20PPM 50PPM和100ppm，
    举例MC-306 32.768khz精度为20 ppm。20ppm的精度就意味着真实频率在
    32.7673千赫（32.768 - 20 ppm时，或x0.999980）和 32.7687千赫（32.768+20 ppm时，或x1.000020）之间。
    你看这些数字值的误差是比较小的，一个月260万秒，所以如果你想用20ppm晶体建做一个闹钟，它就可能每月有1分钟的误差。
    石英晶振有不同的精度范围，一般+ / -20 ppm是属于正品的标准
    10ppm的晶振价格会相对较贵了。
    还有，这个是石英晶振基本的频率，而这个频率会受到周围环境（主要是温度）的影响而产生偏差的。
    当以秒为单位时候，1ppm == 1us；
    计算方法：在做校准的时候计算方法为: ppm = 1000000*(准确值-实际值)/(准确值)

2. TI-CC2540USBdongle固件更新方法
    a.正版 >
        软件：Setup_SmartRFProgr_1.12.7.exe （BTool：BLE-CC254x-1.4.2.2.exe，Sniffer:Setup_SmartRF_Packet_Sniffer_2.18.1.exe）
        硬件：CC Debugger
        固件位置：
          - BTool: CC2540_USBdongle_HostTestRelease_All.hex (\Texas Instruments\BLE-CC254x-1.3\Accessories\HexFiles)
          - Sniffer: sniffer_fw_cc2540_usb.hex (\Texas Instruments\SmartRF Tools\Packet Sniffer\bin\general\firmware)
        连接：直接把cc debugger的排针插在dongle上
<
    b.赝品 >
        连接：
          - dongle接口定义: 1.VCC 2.GND 3.RESET_N 4.P2_1 5.P2_2
          - CC Debugger接口定义：1.GND 2.VCC 3.P2_2 4.P2_1 5.X 6.X 7.RESET_N 8.X 9.X 10.X
        对应连接

3. Vivado:
    XILINX platform cable USB 无法识别解决方法： ~
    管理员身份顺序执行下列命令： >
    $ cd D:\Xilinx\Vivado\2014.3\data\xicom\cable_drivers\nt64\
    $ wdreg.exe -compat -inf xusbdrvr.inf uninstall
    $ wdreg.exe -compat -inf xusbdrvr.inf install

<    Don't close Vivado, but re-start hw-server: ~
    vivado's tcl console: >
    $ disconnect_hw_server
<    cmd console: >
    $ taskkill /im hw_server.exe
    $ set PATH=%PATH%;D:\Xilinx\Vivado\2014.3\lib\win32.o
    $ "D:/Xilinx/Vivado/2014.3/bin/unwrapped/win32.o/hw_server.exe" "-D" "-I20" "-s" "TCP:127.0.0.1:3121"

<    Command line download: ~
    Command line: >
    $ vivado -mode batch -source download.tcl
<    Download to RAM tcl script: >
      open_hw
      connect_hw_server
      open_hw_target [lindex [get_hw_targets -of_objects [get_hw_servers localhost]] 0]
      set_property PROBES.FILE {C:/Users/user/Desktop/FPGA/debug_nets.ltx} [lindex [get_hw_devices] 0]
      set_property PROGRAM.FILE {C:/Users/user/Desktop/FPGA/tb_top.bit} [lindex [get_hw_devices] 0]
      program_hw_devices [lindex [get_hw_devices] 0]
      refresh_hw_device [lindex [get_hw_devices] 0]
      disconnect_hw_server
      close_hw
<    Download to FLASH tcl script: >
      open_hw
      connect_hw_server
      open_hw_target [lindex [get_hw_targets -of_objects [get_hw_servers localhost]] 0]
      create_hw_cfgmem -hw_device [lindex [get_hw_devices] 0] -mem_dev  [lindex [get_cfgmem_parts {28f00ap30b-bpi-x16}] 0]
      set_property PROGRAM.BLANK_CHECK  0 [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      set_property PROGRAM.ERASE  1 [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      set_property PROGRAM.CFG_PROGRAM  1 [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      set_property PROGRAM.VERIFY  1 [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      refresh_hw_device [lindex [get_hw_devices] 0]
      set_property PROGRAM.ADDRESS_RANGE  {use_file} [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      set_property PROGRAM.FILES [list "C:/Users/user/Desktop/FPGA/connfig_28f00ap30t.mcs" ] [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0]]
      set_property PROGRAM.BPI_RS_PINS {none} [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      set_property PROGRAM.UNUSED_PIN_TERMINATION {pull-none} [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      set_property PROGRAM.BLANK_CHECK  0 [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      set_property PROGRAM.ERASE  1 [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      set_property PROGRAM.CFG_PROGRAM  1 [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      set_property PROGRAM.VERIFY  1 [ get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      startgroup
      if {![string equal [get_property PROGRAM.HW_CFGMEM_TYPE  [lindex [get_hw_devices] 0]] [get_property MEM_TYPE [get_property CFGMEM_PART [get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]]]] }  { create_hw_bitstream -hw_device [lindex [get_hw_devices] 0] [get_property PROGRAM.HW_CFGMEM_BITFILE [ lindex [get_hw_devices] 0]]; program_hw_devices [lindex [get_hw_devices] 0]; }; 
      program_hw_cfgmem -hw_cfgmem [get_property PROGRAM.HW_CFGMEM [lindex [get_hw_devices] 0 ]]
      endgroup
      disconnect_hw_server
      close_hw

<    波形导入导出: ~
      导出波形文件：write_hw_ila_data my_hw_ila_data_file.zip [upload_hw_ila_data hw_ila_1]
      导入波形文件：display_hw_ila_data [read_hw_ila_data my_hw_ila_data_file.zip]
      Ref： http://forums.xilinx.com/t5/Design-Tools-Others/Is-it-possible-to-export-waveform-data-from-Vivado-Logic/td-p/341563


4. SPI Flash 汇总
              MID/DID  page_size  sector_size  capacity  OTP(LB)  SecuirtyRegister 
    ------------------------------------------------------------------------------- ~
    GigaDevice: >
    3.3V:
    GD25Q80B:  C84014  256B       4KB          8M-bit    SR.S10   4*256B
    GD25VQ16C: C84215  256B       4KB          16M-bit   SR.S10   4*256B
    1.8V:
    GD25LQ80B: C86014  256B       4KB          8M-bit    S13/12/11 3*512B
    GD25LQ40B: C86013  256B       4KB          4M-bit    S13/12/11 3*512B
    GD25LQ20B: C86012  256B       4KB          2M-bit    S13/12/11 3*512B
    3.3V:
    GD25Q05B:  C84010  256B       4KB          512K-bit  -         -
    GD25Q10B:  C84011  256B       4KB          1M-bit    -         -
    GD25Q21B:  C84012  256B       4KB          2M-bit    S13/12/11 3*512B
    GD25Q40C:  C84013  256B       4KB          4M-bit    SR.S10    4*256B  ***
    GD25Q41B:  C84013  256B       4KB          4M-bit    S13/12/11 3*512B  <--???
    GD25Q80C:  C84014  256B       4KB          8M-bit    SR.S10    4*256B  ***
    GD25Q16C:  C84015  256B       4KB          16M-bit   SR.S10    4*256B  *** HS6600A1's COB board; peripheral #30
    GD25Q32B:  C84016  256B       4KB          32M-bit   SR.S10    4*256B  *** FPGA hanix325t sec@0x000000, 0x000100, 0x000200, 0x000300
    GD25Q32C:  C84016  256B       4KB          32M-bit   S13/12/11 3*1024B                    sec@0x001000, 0x002000, 0x003000

    3.3V, Dual-port:
                                                         SR.S4/3/2=BP2,BP1,BP0
    MD25D40:   514013  256B       4KB          4M-bit    -                 *** HS6600A2's sflash die, SE max current 10mA; read single 18mA@80MHz
    MD25D80:   514014  256B       4KB          8M-bit    -
    XD25D40:   504013
<
    ------------------------------------------------------------------------------- ~
    Berg Micro: >
    3.3V:
                                                         SR. 4/3/2=BP2,BP1,BP0
    BG25Q512A: E04010  256B       4KB          512K-bit  SR2.5/4/3 3*256B
    BG25Q10A:  E04011  256B       4KB          1M-bit    SR2.5/4/3 3*256B
    BG25Q20A:  E04012  256B       4KB          2M-bit    SR2.5/4/3 3*256B
    BG25Q40A:  E04013  256B       4KB          4M-bit    SR2.5/4/3 3*256B  *** HS6600A4's flash die, HS6600A2's external flash by yao
    BG25Q80A:  E04014  256B       4KB          8M-bit    SR2.5/4/3 3*256B  *** HS6600Q48B4P's sflash die, SE current 20mA; read single 7.5mA@33MHz
    BG25Q16A:  E04015  256B       4KB          16M-bit   SR2.5/4/3 3*256B  ***
    BG25Q32A:  E04016  256B       4KB          32M-bit   SR2.5/4/3 3*256B
<
    ------------------------------------------------------------------------------- ~
    Boya: >
    BY25Q40A:  E04013  256B       4KB           4M-bit   SR2.5/4/3 3*256B
    BY25D40A   684013                           4M-bit
    1.8V:
    BG25Q128AL:E06018  256B       4KB         128M-bit   SR2.5/4/3/2 4*256B
<
    ------------------------------------------------------------------------------- ~
    Winbond: >
    3.3V:
                                                         SR. 4/3/2=BP2,BP1,BP0
    W25Q16DV:  EF4015  256B       4KB          16M-bit   S13/12/11 3*256B  *** peripheral board
    W25Q80DV:  EF4014  256B       4KB           8M-bit   S13/12/11 3*256B
    1.8V:
    W25Q16DW:  EF6015                          16M-bit   S13/12/11/10 4*256B

5. 关联没有扩展名的文件(Windows)
    管理员身份运行cmd: >
    $ assoc .="No Extension"
    $ ftype "No Extension"="C:\Program Files\Vim\vim80\gvim.exe" "%1"

6. 源码编译：
    Cygwin:
        cygport (cygwin编译安装打包工具):
            安装cygport：
                $ apt-cyg install cygport       #安装cygport
            使用：
                $ cygport gdb.cygport prep      #准备
                $ cygport gdb.cygport compile   #编译
                $ cygport gdb.cygport install   #安装
                $ cygport gdb.cygport package   #打包

        universal-ctags:
            github:
                $ git clone https://github.com/universal-ctags/ctags.git
            dependence：
                $ apt-cyg install mingw64-i686-gcc-core
                $ apt-cyg install mingw64-i686-win-iconv
            修改mk_mingw.mak：
                DEFINES下加入 "-DUNIX_PATH_SEPARATOR"
            command：
                make -f mk_mingw.mak  CC=i686-w64-mingw32-gcc

        YouCompleteMe:
            github:
                $ git clone https://github.com/Valloric/YouCompleteMe.git
                $ git submodule update --init --recursive
            dependence:
                $ apt-cyg install libboost-devel
                $ apt-cyg install libboost_python3-devel
                $ apt-cyg install python3-devel
                $ apt-cyg install libclang-devel
            command:
                $ python3 install.py --clang-completer --system-libclang --system-boost
                $ find -name libclang.dll.a -delete  # 删除libclang.dll.a, 防止ycmd强制加载
            cleanup: >
                rm -rf azure
                rm -f azure-pipelines.yml codecov.yml COPYING.txt install.sh README.md tox.ini .coveragerc .ycm_extra_conf.py
                rm -f CODE_OF_CONDUCT.md CONTRIBUTING.md install.py print_todos.sh run_tests.py .mergify.yml

                find -iname '.git*' -exec rm -rf {} \;

                find -type d -iname '__pycache__' -exec rm -rf {} \;

                for n in 'doc' 'docs' '*test*' 'examples' '_appveyor' ; do
                    find third_party -type d -iname "$n" -exec rm -rf {} \;
                done

                for n in '.coveragerc' '.hgignore' '.hgtags' 'appveyor.yml' 'codecov.yml' 'makefile' 'cmakelists.txt' \
                        'contributors' 'license*' 'authors*' 'changes*' 'changelog*' 'readme*' 'manifest' '.travis.yml' \
                        '*.txt' '*.rst' '*.go' '*.svg' '*.ai' '*.md' '*.in' '*.cmake' '*.bat' '*.sh' '*.c' '*.h' '*.inc' \
                        '*.cc' '*.cpp' '*.hpp' '*.ipp' '*.cs' '*.csproj' '*.sln' 'libclang.dll.a' ; do
                    find third_party -type f -not -iname '*.py' -not -iname 'grammar*' -iname "$n" -delete
                done

                find -depth -type d -empty -delete
<
        arm-none-eabi-gdb:
            最新版本在：
                ftp://sourceware.org/pub/gdb/releases/
            原始cygwin版本下载：
                $ apt-cyg source gdb
                修改下载的gdb源文件的gdb.cygport:
                    src_compile()内的cygconf中，加入：--target arm-none-eabi
                                                删除：--with-system-readline
                    删除PATCH_URI里的内容
                用最新版本的gdb替换.tar.xz文件
            使用cygport编译安装
            编译依赖：libexpat-devel liblzma-devel libmpfr-devel libncurses-devel libreadline-devel python2 python2-devel zlib-devel
            执行依赖: bash cygwin libexpat1 libgcc1 libiconv2 libintl8 liblzma5 libmpfr6 libncursesw10 libreadline7 libstdc++6 python27 zlib0

        vim:
            $ make distclean
            cd src
            $ ./configure --with-features=huge \
                          --enable-multibyte \
                          --enable-pythoninterp=yes \
                          --enable-python3interp=yes \
                          --enable-rubyinterp=yes \
                          --enable-perlinterp=yes \
                          --enable-luainterp=yes \
                          --enable-cscope \
                          --enable-fail-if-missing
            $ make
            $ make install

        tmux:
            tmux在cygwin上启动慢的解决方法：
            - 在server.c的server_start()函数的exit(0)的上一行添加：unlink(socket_path); 来删除已存在的socket文件
              $ ./autogen.sh && ./configure
              $ make
              $ make install DESTDIR=dist prefix=/usr

        sshfs:
            下载WinFsp并安装: https://github.com/billziss-gh/winfsp/releases
            在Cygwin下执行这个脚本："%ProgramFiles(x86)%\WinFsp\opt\cygfuse\install.sh
            下载sshfs：https://github.com/libfuse/sshfs/releases
            安装依赖：$ apt-cyg install libglib2.0-devel meson
            在sshfs源代码目录执行：$ ./test/appveyor-build.sh; ninja install
            eg: sshfs -o allow_other,reconnect,delay_connect,ConnectTimeout=5,ServerAliveInterval=5,port=9000,uid=-1,gid=-1,FileInfoTimeout=-1 u0_a103@192.168.100.230:storage/downloads/1 /mnt/mate9

7. 创建常用右键菜单：
    使用winmaster.exe创建有用的右键菜单：
    1、cygwin >
    $ C:\cygwin64\home\user\.bin\hstart.exe /NOCONSOLE "cmd /c set HOME=&set CHERE_INVOKING=1&C:\cygwin64\bin\mintty.exe -"
<    2、cmd(adm) >
    $ C:\cygwin64\home\user\.bin\cmd_adm.bat
<    3、MeinPlatz (文件统计) >
    $ C:\cygwin64\home\user\.bin\hstart.exe /NOCONSOLE "cmd /C E:\4-other\OneDrive\Skill\Tool\MeinPlatz\MeinPlatz.exe %%CD%%"

8. 编辑器或者shell出现乱码
    1、尝试更改字体
    2、尝试更改编码方式：utf8

9. git常见问题解决方法
    git push出现如下错误： >
        Counting objects: 3, done.
        Writing objects: 100% (3/3), 226 bytes, done.
        Total 3 (delta 0), reused 0 (delta 0)
        remote: error: refusing to update checked out branch: refs/heads/master
        remote: error: By default, updating the current branch in a non-bare repository
        remote: error: is denied, because it will make the index and work tree inconsistent
        remote: error: with what you pushed, and will require 'git reset --hard' to match
        remote: error: the work tree to HEAD.
        remote: error: 
        remote: error: You can set 'receive.denyCurrentBranch' configuration variable to
        remote: error: 'ignore' or 'warn' in the remote repository to allow pushing into
        remote: error: its current branch; however, this is not recommended unless you
        remote: error: arranged to update its work tree to match what you pushed in some
        remote: error: other way.
        remote: error: 
        remote: error: To squelch this message and still keep the default behaviour, set
        remote: error: 'receive.denyCurrentBranch' configuration variable to 'refuse'.
        To git@192.168.45.42:teamwork.git
         ! [remote rejected] master -> master (branch is currently checked out)
        error: failed to push some refs to 'git@192.168.45.42:teamwork.git'
<        Server端执行命令解决问题： >
        $ git config receive.denyCurrentBranch ignore

<    git pull出现如下错误： >
        You asked me to pull without telling me which branch you
        want to merge with, and 'branch.master.merge' in
        your configuration file does not tell me, either. Please
        specify which branch you want to use on the command line and
        try again (e.g. 'git pull <repository> <refspec>').
        See git-pull(1) for details.

        If you often merge with the same branch, you may want to
        use something like the following in your configuration file:

            [branch "master"]
            remote = <nickname>
            merge = <remote-ref>

            [remote "<nickname>"]
            url = <url>
            fetch = <refspec>

        See git-config(1) for details.
<        执行命令： >
        $ git config branch.master.remote origin
        $ git config branch.master.merge refs/heads/master
<
    git 解决冲突 (conflict)
        二进制文件冲突解决： >
            $ git checkout --ours xxx/xx/x      # 强制使用我的文件
            $ git checkout --theirs xxx/xx/x    # 强制使用其他人的文件
<        文本文件冲突解决： >
            $ git mergetool                     # 使用mergetool自动解决
<
        先通过上面两种方法解决冲突然后： >
            $ git add xxx/xx/x                  # 提交解决冲突后的文件到缓存区
            $ git commit -m "resolve conflict"  # 提交缓存区的文件

10. Doxygen
    a. 按原始注释输出(保留空格和换行)
        <pre> ... </pre>
    b. 去掉不需要的行
        @cond ... @endcond
    c. 创建Document.html指向index.html
        Document.html内容如下:
        <meta http-equiv="REFRESH" content="0;URL=html/index.html">
    d. 添加代码块
        @code {.c} ... @endcode
    e. 添加图片
        @image html a.jpg


11. ellisys最新版本
    https://www.ellisys.com/better_analysis/bta_latest.htm

12. 取消 "UNC paths are not supported. Defaulting to Windows directory" 提示
    Under the registry path
       HKEY_CURRENT_USER\Software\Microsoft\Command Processor
    add the value DisableUNCCheck REG_DWORD and set the value to 0 x 1 (Hex).
    Note: On Windows 10 version 1803, the setting seems to be located under HKLM:
        HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor

13. windows ‘copy’ 命令不修改文件modify-time属性
    这个问题会导致git status命令漏文件
    更新文件的modify-time属性:
        copy /B /Y source_file+,,    把source_file复制到当前文件夹，并修改时间属性。

14. ss
    104.18.18.18 free-ss.site

15. windows蓝屏调试
    计算机管理-事件查看器-Windows日志-系统 里会记录蓝屏事件
    蓝屏时系统会把内存转储文件存放到：C:\WINDOWS\MEMORY.DMP，使用WinDbg可以调试该文件

16. 阻止乐视电视更新
    在路由器的Host表中添加：127.0.0.1 upgrade-hdtv.cp21.ott.cibntv.net

17. 使用UltraEdit创建自定义工具 (Jlink)
    高级 -> 用户工具 -> 配置工具：
        命令行："C:\Program Files (x86)\SEGGER\JLink_V648\JLink.exe" -device Cortex-M4 -If SWD -CommandFile "%F"
        输出：输出到列表框
    右键Ribbon空白区域 -> 自定义功能区 -> New Group -> Add>> (把左侧新添加的Jlink工具添加到新Group中)

18. Win10卓越性能模式
    Powershell: powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
    控制面板会多出来卓越性能的隐藏附加方案
    Windows 10 version 1803 或更高版本

19. Window10的Linux子系统
    Ubuntu 18.04
    a. 使用wsltty作为控制台
        https://github.com/mintty/wsltty
        安装位置：
            %LOCALAPPDATA%\wsltty
        wsltty使用.minttyrc:
            wsltty同样使用mintty的配置文件, 位置在: %APPDATA%\wsltty\config,
            把.minttyrc里的内容拷贝到这个文件中
        执行默认shell的快捷方式：
             %LOCALAPPDATA%\wsltty\bin\mintty.exe --WSL= --configdir="%APPDATA%\wsltty" -~ wsl.exe

    b. 使用国内源：
        $ vim /etc/apt/sources.list:
        $ sudo apt-get update
        $ sudo apt-get upgrade
        新源列表： >
            #ubunto 18.04
            deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
            deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
            deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
            deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
            deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
            deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
            deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
            deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
            deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
            deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
<
    c. 修改默认shell为zsh
        $ chsh -s $(which zsh)
        上条命令如果不行，则在.bashrc的最前面添加：[[ -t 1 ]] && exec zsh
        快捷方式：%LOCALAPPDATA%\wsltty\bin\mintty.exe --WSL= --configdir="%APPDATA%\wsltty" -~ wsl.exe 会加载默认shell，否则会强制启动bash

    d. 添加新的用户
        $ useradd liqiang --shell /usr/bin/zsh --home-dir /home/liqiang -m
        $ passwd liqiang         # 新用户的密码
        $ sudo vim /etc/sudoers  # 使新用户具备sudo权限
            /etc/sudoers 添加如下内容： >
                liqiang ALL=(ALL) ALL
<        在Powershell中设置默认用户:
            $ ubuntu1804 config --default-user liqiang

20. Window10安装docker
    a. 开启 Hyper-V
        程序和功能 -> 启用或关闭Windows功能 -> 勾选Hyper-V
    b. 安装Toolbox
        https://www.docker.com/get-docker
        需要注册 Download Docker Desktop
       运行下载的安装文件
    c. 更换镜像
        %PROGRAMDATA%\docker\config\daemon.json
        加入或修改： >
            {
              "registry-mirrors": ["http://hub-mirror.c.163.com"]
            }

21. Markdown速查表 >
    # 标题1
    ## 标题2
    ### 标题3
    #### 标题4
    ##### 标题5
    ###### 标题6
    *重点* _重点_
    **强调** __强调__
    1. 有序列表
    * + - 无序列表
    > 引用块
    `代码段`
    ```代码块
    [链接](http://url.com "标题")
    [参考链接](ID)
    [ID]: http://url.com "参考链接"
    ![图片][./image.jpg "标题"]
    --- *** ___ 分割线

22. 常用开源软件协议
    Apache License, 2.0 (Apache-2.0) >
        Apache Lience允许使用者修改和重新发布代码(以其他协议形式)，允许闭源商业发布和销售。
        Apache Lience鼓励代码共享和尊重原作者的著作权。
        使用Apache Licence协议，需要遵守以下规则：
          1、需要给代码的用户一份Apache Lience；
          2、如果你修改了代码，需要在被修改的文件中说明；
          3、在延伸的代码中（修改或衍生的代码）需要带有原来代码中的协议、商标、专利声明和其他原来作者规定需要包含的说明。
          4、如果再发布的产品中包含了Notice文件，则需要在Notice文件中带有Apache Lience。
             你可以在Notice中增加自己的许可，但不可以表现为对Apache Lience构成更改。
        要点：商业软件可以使用。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。
<
    BSD开源协议 (Berkerley Software Distribution) (BSD 3-Clause, BSD 2-Clause) >
        目前分为BSD 3-Clause和BSD 2-Clause。顾名思义，3-Clause包含3个条款，2-Clause只有两个。
        BSD允许使用者修改和重新发布代码(以其他协议形式)，允许闭源商业发布和销售。
        BSD鼓励代码共享的同时，要求尊重代码作者的著作权。
        使用BSD协议，需要遵守以下规则（2-Clause则不带第3条）：
          1、如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议；
          2、如果再发布的只是二进制类库/软件，则需要在类库/软件的文档那个和版权声明中包含原来代码中的BSD协议；
          3、不可以用开源代码的“作者/机构的名字”或“原来产品的名字”做市场推广。
        要点：商业软件可以使用，也可以修改使用BSD协议的代码。
<
    GPL (GNU General Public License) >
        GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。
        GPL具有“传染性”，只要在一个软件中使用(“使用”指类库引用,修改后的代码或者衍生代码)GPL协议的产品,
        则该软件产品必须也采用 GPL协议,既必须也是开源和免费。
        GPL对商业发布的限制（引自Java视线论坛的Robbin）:
          “GPL是针对软件源代码的版权,而不是针对软件编译后二进制版本的版权.你有权免费获得软件的源代码,
          但是你没有权力免费获得软件的二进制发行版本.GP对软件发行版本唯一的限制就是:你的发行版本必须把完整的源代码一同提供.”
        由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，所以商业软件就不适合采用使用GPL协议的开源代码。
        使用GPL协议，需要遵守以下规则：
          1、确保软件自始至终都以开放源代码形式发布，保护开发成果不被窃取用作商业发售。任何一套软 件，
             只要其中使用了受 GPL 协议保护的第三方软件的源程序，并向非开发人员发布时，
             软件本身也就自动成为受 GPL 保护并且约束的实体。也就是说，此时它必须开放源代码。
          2、GPL 大致就是一个左侧版权（Copyleft，或译为“反版权”、“版权属左”、“版权所无”、“版责”等）的体现。
             你可以去掉所有原作的版权 信息，只要你保持开源，并且随源代码、二进制版附上 GPL 的许可证就行，
             让后人可以很明确地得知此软件的授权信息。GPL 精髓就是，只要使软件在完整开源 的情况下，
             尽可能使使用者得到自由发挥的空间，使软件得到更快更好的发展。
          3、无论软件以何种形式发布，都必须同时附上源代码。例如在 Web 上提供下载，
             就必须在二进制版本（如果有的话）下载的同一个页面，清楚地提供源代码下载的链接。
             如果以光盘形式发布，就必须同时附上源文件的光盘。
          4、开发或维护遵循 GPL 协议开发的软件的公司或个人，可以对使用者收取一定的服务费用。
             但还是一句老话——必须无偿提供软件的完整源代码，不得将源代码与服务做捆绑或任何变相捆绑销售。
        要点：商业软件不能使用GPL协议的代码。
<
    LGPL (GNU Library or "Lesser" General Public License) >
        与GPL的强制性开源不同的是，LGPL允许商业软件通过类库引用(link)的方式使用LGPL类库而不需要开源商业软件的代码。
        但是如果修改LGPL协议的代码或者衍生,则所有修改的代码,涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。
        因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用,但不适合希望以LGPL协议代码为基础,
        通过修改和衍生的方式做二次开发的商业软件采用。
        要点：商业软件可以使用，但不能修改LGPL协议的代码。
<
    MIT (MIT license) >
        [MIT许可证之名源自麻省理工学院 (Massachusetts Institute of Technology, MIT)，又称「X条款」(X License)或「X11条款」(X11 License)
        MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,
        无论你是以二进制发布的还是以源代码发布的。
        要点：商业软件可以使用，也可以修改MIT协议的代码，甚至可以出售MIT协议的代码。
<
    MPL (Mozilla Public License 1.1) >
        MPL协议允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者 。这种授权维护了商业软件的利益，
        它要求基于这种软件的修改无偿贡献版权给该软件。这样，围绕该软件的所有代码的版权都集中在发起开发人的手中。
        但MPL是允许修改，无偿使用得。MPL软件对链接没有要求。
        要点：商业软件可以使用，也可以修改MPL协议的代码，但修改后的代码版权归软件的发起者。
<
    CDDL (Common Development and Distribution License) >
        CDDL（Common Development and Distribution License，通用开发与销售许可）开源协议，是MPL（Mozilla Public License）的扩展协议，
        它允许公共版权使用，无专利费，并提供专利保护，可集成于商业软件中，允许自行发布许可。
        要点：商业软件可以使用，也可以修改CDDL协议的代码。
<
    Common Public License 1.0 (CPL-1.0) (已废弃) >
        CPL是IBM提出的开源协议，主要用于IBM或跟IBM相关的开源软件/项目中（例如，Eclipse、Open Laszlo等）。
<
    EPL (Eclipse Public License 1.0) >
        EPL允许Recipients任意使用、复制、分发、传播、展示、修改以及改后闭源的二次商业发布。
        使用EPL协议，需要遵守以下规则：
          1、当一个Contributors将源码的整体或部分再次开源发布的时候,必须继续遵循EPL开源协议来发布,
             而不能改用其他协议发布.除非你得到了原“源码”Owner 的授权；
          2、EPL协议下,你可以将源码不做任何修改来商业发布.但如果你要发布修改后的源码,
             或者当你再发布的是Object Code的时候,你必须声明它的Source Code是可以获取的,而且要告知获取方法；
          3、当你需要将EPL下的源码作为一部分跟其他私有的源码混和着成为一个Project发布的时候,
             你可以将整个Project/Product以私人的协议发布,但要声明哪一部分代码是EPL下的,而且声明那部分代码继续遵循EPL；
          4、独立的模块(Separate Module),不需要开源。
        要点：商业软件可以使用


23. 压缩算法比较
    The first column with numbers 1..9 indicates the compression setting passed to gzip, bzip2 and lzmash (e.g. "gzip -9").
    Tarball mode from linux-3.3, original size: 466083840 (445M)

    Compression ratio: ~
       | gzip    bzip2   lzma    lzma -e  xz      xz -e   lz4     lzop
    ---+--------------------------------------------------------------
    -1 | 26.8%   20.2%   18.4%   15.5%    18.4%   15.5%   35.6%   36.0%
    -2 | 25.5%   18.8%   17.5%   15.1%    17.5%   15.1%   35.6%   35.8%
    -3 | 24.7%   18.2%   17.1%   14.8%    17.1%   14.8%   35.6%   35.8%
    -5 | 22.0%   17.6%   14.9%   14.6%    14.9%   14.6%   -       35.8%
    -7 | 21.5%   17.2%   14.4%   14.3%    14.4%   14.3%   -       24.9%
    -9 | 21.4%   16.9%   14.1%   14.0%    14.1%   14.0%   -       24.6%

    Compression time: ~
       | gzip    bzip2   lzma    lzma -e  xz      xz -e   lz4     lzop
    ---+---------------------------------------------------------------
    -1 | 8.1s    58.3s   31.7s   4m37s    32.2s   4m40s   1.3s    1.6s
    -2 | 8.5s    58.4s   40.7s   4m49s    41.9s   4m53s   1.4s    1.6s
    -3 | 9.6s    59.1s   1m2s    4m36s    1m1s    4m39s   1.3s    1.5s
    -5 | 14s     1m1s    3m5s    5m       3m6s    4m53s   -       1.5s
    -7 | 21s     1m2s    4m14s   5m52s    4m13s   5m57s   -       35s
    -9 | 33s     1m3s    4m48s   6m40s    4m51s   6m40s   -       1m5s

    Decompression time: ~
       | gzip    bzip2   lzma    lzma -e  xz      xz -e   lz4     lzop
    ---+---------------------------------------------------------------
    -1 | 3.5s    3.4s    6.7s    5.9s     7.2s    6.5s    0.4s    1.5s
    -2 | 3s      15.7    6.3s    5.6s     6.8s    6.3s    0.3s    1.4s
    -3 | 3.2s    15.9s   6s      5.6s     6.7s    6.2s    0.4s    1.4s
    -5 | 3.2s    16s     5.5s    5.4s     6.2s    6s      -       1.5s
    -7 | 3s      15s     5.3s    5.3s     5.9s    5.8s    -       1.3s
    -9 | 3s      15s     5s      5.1s     5.6s    5.6s    -       1.2s

24. win10关机等待时间
    WaitToKillServiceTimeout  毫秒 20000 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Contro]
    WaitToKillAppTimeout      毫秒 20000 [HKEY_CURRENT_USER\ControlPanel\Desktop] or [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Contro]
    HungAppTimeout            毫秒 5000  [HKEY_CURRENT_USER\ControlPanel\Desktop]

vim: ft=help
